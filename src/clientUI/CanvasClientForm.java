package clientUI;

import common.CanvasAction;
import common.InitData;
import common.CanvasServerInterface;
import client.CanvasClient;

import javax.swing.*;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.Arrays;

/**
 * UI form class generated by IntelliJ GUI Designer.
 * Fields correspond to components laid out in the .form file.
 */
public class CanvasClientForm {
    private JPanel rootPanel;
    private CanvasComponent canvasComponent;
    private JSlider strokeSlider;
    private JPanel colorPanel;
    private JButton customColorButton;
    private JList<String> userList;
    private JButton LINE;
    private JButton TRIA;
    private JButton RECT;
    private JButton OVAL;
    private JButton FREE_DRAW;
    private JButton TEXT;
    private JButton ERASER;
    private JButton Undo;
    private JButton Redo;
    private JButton colorButton1;
    private JButton colorButton2;
    private JButton colorButton5;
    private JButton colorButton6;
    private JButton colorButton3;
    private JButton colorButton4;
    private JButton colorButton7;
    private JButton colorButton8;
    private JButton colorButton9;
    private JButton colorButton10;
    private JButton colorButton11;
    private JButton colorButton12;
    private JButton colorButton13;
    private JButton colorButton14;
    private JButton colorButton15;
    private JButton colorButton16;
    private JButton colorButton17;
    private DefaultListModel<String> userListModel;
    private JTextArea chatArea;
    private JTextField chatInput;
    private JButton sendButton;
    private JPanel canvasPanelHolder;
    private JLabel userListLabel;
    private JLabel managerUserListLabel;
    private JMenuBar menuBar;
    private JMenu fileMenu;
    private JMenuItem newItem;
    private JMenuItem openItem;
    private JMenuItem saveItem;
    private JMenuItem saveAsItem;
    private CanvasClient client;

    /**
     * Generated UI initialization code.
     * Sets up colorPanel grid layout.
     */
    private void $$$setupUI$$$() {
        colorPanel.setLayout(new GridLayout(2, 9, 1, 1));
        // Other generated layout code omitted...
    }

    /**
     * Constructor: initializes components, binds event listeners.
     *
     * @param server RMI server interface
     * @param client this client instance
     * @param init   initial data (history + online users)
     */
    public CanvasClientForm(CanvasServerInterface server, CanvasClient client, InitData init) {
        this.client = client;
        $$$setupUI$$$();
        // force all our color‚Äêcoded buttons to paint their background
        for (JButton b : Arrays.asList(
                LINE, TRIA, RECT, OVAL, FREE_DRAW, TEXT, ERASER, sendButton, Undo, Redo, colorButton17
        )) {
            b.setOpaque(true);              // allow background to show
            b.setContentAreaFilled(true);   // fill with background color
            b.setBorderPainted(false);
        }

        // Show manager label only for admin
        managerUserListLabel.setVisible(client.isAdmin());

        // Create and embed the drawing canvas
        canvasComponent = new CanvasComponent(server, client.getName());
        canvasPanelHolder.setLayout(new BorderLayout());
        canvasPanelHolder.add(canvasComponent, BorderLayout.CENTER);

        // Initialize online user list
        userListModel = new DefaultListModel<>();
        userList.setModel(userListModel);
        for (String u : init.userList) {
            if (client.isAdmin() && u.equals(client.getName())) {
                userListModel.addElement(u + " (Manager)");
            } else {
                userListModel.addElement(u);
            }
        }

        // Load initial drawing history
        canvasComponent.setHistory(init.history);

        // Double-click to kick user (admin only)
        userList.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                if (e.getClickCount() == 2 && client.isAdmin()) {
                    String sel = userList.getSelectedValue();
                    if (sel != null && !sel.equals(client.getName())) {
                        int r = JOptionPane.showConfirmDialog(
                                rootPanel,
                                "Remove user '" + sel + "'?",
                                "Confirm Removal",
                                JOptionPane.YES_NO_OPTION
                        );
                        if (r == JOptionPane.YES_OPTION) {
                            client.kickUser(sel);
                        }
                    }
                }
            }
        });

        // Tool buttons: select draw mode
        LINE.addActionListener(e -> canvasComponent.setTool(CanvasAction.Type.LINE));
        TRIA.addActionListener(e -> canvasComponent.setTool(CanvasAction.Type.TRIA));
        RECT.addActionListener(e -> canvasComponent.setTool(CanvasAction.Type.RECT));
        OVAL.addActionListener(e -> canvasComponent.setTool(CanvasAction.Type.OVAL));
        FREE_DRAW.addActionListener(e -> canvasComponent.setTool(CanvasAction.Type.FREE_DRAW));
        TEXT.addActionListener(e -> canvasComponent.setTool(CanvasAction.Type.TEXT));
        ERASER.addActionListener(e -> canvasComponent.setTool(CanvasAction.Type.ERASER));
        Undo.addActionListener(e -> client.undo());
        Redo.addActionListener(e -> client.redo());

        colorButton17.setEnabled(false);
        colorButton17.setBackground(canvasComponent.getCurrentColor());
        // Color panel: pick one of 16 preset colors
        for (Component c : colorPanel.getComponents()) {
            if (c instanceof JButton && c != customColorButton) {
                JButton btn = (JButton)c;
                btn.addActionListener(e -> {
                    Color chosen = btn.getBackground();
                    canvasComponent.setColor(chosen);
                    // update both custom button and preview button
                    colorButton17.setBackground(chosen);
                });
            }
        }
        // Custom color chooser
        customColorButton.addActionListener(e -> {
            Color chosen = JColorChooser.showDialog(
                    rootPanel,
                    "Choose your color",
                    canvasComponent.getCurrentColor()
            );
            if (chosen != null) {
                canvasComponent.setColor(chosen);
                customColorButton.setBackground(chosen);
                colorButton17.setBackground(chosen);
            }
        });

        // Stroke width slider
        strokeSlider.addChangeListener(e ->
                canvasComponent.setStrokeWidth(strokeSlider.getValue())
        );

        // Chat input: Enter key sends message
        chatInput.addActionListener(e -> {
            String msg = chatInput.getText().trim();
            if (!msg.isEmpty()) {
                client.sendChat(msg);
                chatInput.setText("");
            }
        });
        // Send button also sends message
        sendButton.addActionListener(e -> {
            String msg = chatInput.getText().trim();
            if (!msg.isEmpty()) {
                client.sendChat(msg);
                chatInput.setText("");
            }
        });
    }

    /** Returns the root panel for embedding in a frame. */
    public JPanel getRootPanel() {
        return rootPanel;
    }

    /** Provides access to the canvas component. */
    public CanvasComponent getCanvasComponent() {
        return canvasComponent;
    }

    /** Provides access to the online user list. */
    public JList<String> getUserList() {
        return userList;
    }

    /** Provides access to the chat area for appending messages. */
    public JTextArea getChatArea() {
        return chatArea;
    }

    private void createUIComponents() {

    }
}
